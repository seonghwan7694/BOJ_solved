#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int pivot = 505;
ll N, M, ans;
ll board[1010][1010];
ll poliomino[19][3][2] = {
  // 청록색 - ok
  {{0, 1}, {0, 1}, {0, 1}},
  {{-1, 0}, {-1, 0}, {-1, 0}},
  
  // 올리브색
  {{0, 1}, {1, 0}, {0, -1}},

  // 초록색
  {{1, 0}, {0, 1}, {1, 0}},
  {{-1, 0}, {0, 1}, {-1, 0}},
  {{0, 1}, {-1, 0}, {0, 1}},
  {{0, 1}, {1, 0}, {0, 1}},

  // 핑크색
  {{0, 1}, {1, 0}, {-1, 1}},
  {{0, 1}, {-1, 0}, {1, 1}},
  {{0, 1}, {-1, 0}, {2, 0}},
  {{1, 0}, {1, 0}, {-1, 1}},

  // 주황색
  {{0, 1}, {1, 0}, {1, 0}},
  {{0, 1}, {-1, 0}, {-1, 0}},
  {{-1, 0}, {0, 1}, {0, 1}},
  {{0, 1}, {0, 1}, {1, 0}},
  {{1, 0}, {0, 1}, {0, 1}},
  {{0, 1}, {0, 1}, {-1, 0}},
  {{0, -1}, {1, 0}, {1, 0}},
  {{1, 0}, {1, 0}, {0, 1}}
};

/*
청록색 -> 4개
올리브색 -> 1개
주황색 -> 8개
초록색 -> 4개
핑크색 -> 4개

======== 
ㅁ
ㅁㅁ
  ㅁ
{{0, 0}, {1, 0}, {0, 1}, {1, 0}}

  ㅁ
ㅁㅁ
ㅁ
{{0, 0}, {-1, 0}, {0, 1}, {-1, 0}}

  ㅁㅁ
ㅁㅁ
{{0, 0}, {0, 1}, {-1, 0}, {0, 1}}

ㅁㅁ
  ㅁㅁ
{{0, 0}, {0, 1}, {1, 0}, {0, 1}}

========
ㅁㅁㅁ
  ㅁ
{{0, 0}, {0, 1}, {1, 0}, {-1, 1}}

  ㅁ
ㅁㅁㅁ
{{0, 0}, {0, 1}, {-1, 0}, {1, 1}}

  ㅁ
ㅁㅁ
  ㅁ
{{0, 0}, {0, 1}, {-1, 0}, {2, 0}}

ㅁ
ㅁㅁ
ㅁ
{{0, 0}, {1, 0}, {1, 0}, {-1, 1}}
=======

ㅁㅁ
  ㅁ
  ㅁ
{{0, 0}, {0, 1}, {1, 0}, {1, 0}} - ok

  ㅁ
  ㅁ
ㅁㅁ
{{0, 0}, {0, 1}, {-1, 0}, {-1, 0}} - ok

ㅁㅁㅁ
ㅁ
{{0, 0}, {-1, 0}, {0, 1}, {0, 1}} - ok

ㅁㅁㅁ
    ㅁ
{{0, 0}, {0, 1}, {0, 1}, {1, 0}} - ok

ㅁ
ㅁㅁㅁ
{{0, 0}, {1, 0}, {0, 1}, {0, 1}} - ok

    ㅁ
ㅁㅁㅁ
{{0, 0}, {0, 1}, {0, 1}, {-1, 0}} - ok

ㅁㅁ
ㅁ
ㅁ
{{0, 0}, {0, -1}, {1, 0}, {1, 0}}

ㅁ
ㅁ
ㅁㅁ
{{0, 0}, {1, 0}, {1, 0}, {0, 1}}
*/

void DFS(ll x, ll y, ll score, ll t, ll k){
  if(k == 4){
    ans = max(ans, score); // 여기 score 조심
    return;
  }
  ll nx = x + poliomino[t][k][0];
  ll ny = y + poliomino[t][k][1];
  DFS(nx, ny, score + board[x][y], t, k + 1);
}
int main(){
  ios::sync_with_stdio(false);
  cin.tie(0); cout.tie(0);

  cin >> N >> M;
  for(int i = pivot; i < N + pivot; i++){
    for(int j = pivot; j < M + pivot; j++){
      cin >> board[i][j];
    }
  }

  for(ll i = pivot; i < N + pivot; i++){
    for(ll j = pivot; j < M + pivot; j++){
      for(ll t = 0; t < 19; t++){
        DFS(i, j, 0, t, 0);
      }
    }
  }

  cout << ans << "\n";

  return 0;
}